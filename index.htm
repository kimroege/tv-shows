
<!-- https://www.episodate.com/api/show-details?q=39957 -->
<html>
<head>
<title>episode</title>

<style type="text/css">
  .hoverTable {
    /*width:100%; */
    border-collapse: collapse;
    font-family: Arial, sans-serif;
    font-size: 14px;
    font-weight: normal;
    padding: 10px 5px;
    border-style: solid;
    border-width: 0px;
    overflow: hidden;
    word-break: normal;
  }

  .hoverTable td {
    padding: 10px;
    /*border:#4e95f4 1px solid;*/
  }

  .hoverTable tr {
    background: #b8d1f3;
  }

  .hoverTable tr:hover {
    background-color: #4287f5;
  }

  .hoverTable th {
    background: #b8d1f3;
    font-weight: bold;
    text-align: left;
    padding: 10px 5px;
  }

  .hoverTable th:hover {
    background-color: #b8d1f3;
  }
</style>

</head>
<body onload="getAllShows(data)">

<script type="text/javascript" src="https://momentjs.com/downloads/moment-with-locales.js"></script>
<!--<script type="text/javascript" src="https://raw.githubusercontent.com/bobbykjack/sort-table-js/main/sort-table.js"></script>-->
<!--<script type="text/javascript" src="https://www.kryogenix.org/code/browser/sorttable/sorttable.js"></script>-->
<script type="text/javascript" src="shows.json"></script>

<script>
  var episodateApiUrl = 'https://www.episodate.com/api/show-details?q=';
  var justWatchUrl = 'https://www.justwatch.com/';
  var tvmazeApiUrl = 'https://api.tvmaze.com/shows/';
  var jw ="";

  //console.log(data);
  data.sort((a, b) => (a.name > b.name) ? 1 : -1);


function getAllShows(data) {
  var tablecontentstart = '<table class="tg hovertable" id="table">';
  var tablecontentheader = '<tr class="tg-6z2b"><th></th><th>Show</th><th>Status</th><th>Last Episode</th><th>Last air date (UTC)</th><th>Next Episode</th><th>Next air date (UTC)</th><th>Days left</th><th>Links</th></tr>';
  var tablecontentend = '</table>';
  var tablecontentshow ="";
  for(var i = 0; i < data.length; i++) {
    var obj = data[i];

    //var streamingService = replaceIcon(obj.streamingService);
    //console.log(streamingService);

    //console.log(obj.id);
    buildTableRow(obj);

    tablecontentshow += buildTableRow(obj);

    if (obj.episodate) {
       //getEpisodateDetails(obj.id, obj.episodate);
    }
   
    if (obj.tvmaze) {
      getTvmazeDetails(obj.id, obj.tvmaze);
    }
  }
  document.getElementById('table').innerHTML = tablecontentstart + tablecontentheader + tablecontentshow + tablecontentend;
}

function buildTableRow(obj) {
  //return '<tr><td class="tg-6z2b" id="name-'+obj.id+'">'+obj.name+'</td> <td class="tg-6z2b" id="nextep-'+obj.id+'"></td> <td class="tg-6z2b" id="time-'+obj.id+'"></td></tr>';
  var start =       '<tr id="show-'+obj.id+'">';
  var icon =        '<td class="tg-6z2b"><img src="'+obj.streamingService+'" width="16" height="16"></td>';
  var name =        '<td class="tg-6z2b" id="name-'+obj.id+'">'+obj.name+'</td>';
  var status =      '<td class="tg-6z2b" id="status-'+obj.id+'"></td>';
  var nextep =      '<td class="tg-6z2b" id="nextep-'+obj.id+'"></td>';
  var lastep =      '<td class="tg-6z2b" id="lastep-'+obj.id+'"></td>';
  var lastairdate = '<td class="tg-6z2b" id="lastairdate-'+obj.id+'"></td>';
  var nextairdate = '<td class="tg-6z2b" id="nextairdate-'+obj.id+'"></td>';
  var daysleft =    '<td class="tg-6z2b" id="daysleft-'+obj.id+'"></td>';
  var links =          '<td class="tg-6z2b"> <a href="'+justWatchUrl+obj.jw+'" target="_blank"><img src="https://www.justwatch.com/favicon.ico" width="16" height="16"></a> <a href="https://www.imdb.com/title/'+obj.imdb+'" target="_blank"><img src="https://ia.media-imdb.com/images/G/01/imdb/images/favicon-2165806970" width="16" height="16"></a></td>\n';
  var end =         '</tr>';
  return  start + icon + name + status + lastep + lastairdate + nextep + nextairdate + daysleft + links + end;
}

function getEpisodateDetails(id, episodate) {
  url = episodateApiUrl + episodate;
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      json = JSON.parse(xhttp.responseText).tvShow;
      //console.log(json);
      if (id != 'the-expanse') {
        var nextep = "nextep-" + id;
        var nextairdate = "nextairdate-" + id;
        var daysleft = "daysleft-" + id;
        var status = "status-" + id;

        if (json.countdown && json.countdown.air_date) {
          var next_airdate = json.countdown.air_date;
          var future = moment(next_airdate);
          var start = moment(yyyymmdd());
          var d = future.diff(start, 'days');
          document.getElementById(nextairdate).innerHTML = next_airdate;
          document.getElementById(daysleft).innerHTML = d+" day(s)";
        }

        if (json.countdown && json.countdown.season && json.countdown.episode) {
          season = ("00"+json.countdown.season).slice(-2);
          episode = ("00"+json.countdown.episode).slice(-2);
          nextepdata = "S"+season+"E"+episode;
          document.getElementById(nextep).innerHTML = nextepdata;
        }
        //document.getElementById(status).innerHTML = json.status;
        }
        
       //return json;
    }
};
xhttp.open("GET", url, true);
xhttp.send();
}

function getTvmazeDetails (id, tvmaze) {
  url = tvmazeApiUrl + tvmaze + "?embed[]=nextepisode&embed[]=previousepisode";
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      json = JSON.parse(xhttp.responseText);
      var status = "status-" + id;
      var show = "show-" + id;
      document.getElementById(status).innerHTML = json.status;
      if (json.status != 'Running' && json.status != 'In Development') {
        document.getElementById(show).classList.add("NotRunning");
      }

        // Next episode
        if (json._embedded && json._embedded.nextepisode) {
          var nextep = "nextep-" + id;
          var nextairdate = "nextairdate-" + id;
          var daysleft = "daysleft-" + id;

          nextepdata = seasonEpisode(json._embedded.nextepisode.season, json._embedded.nextepisode.number);
          next_airdate = json._embedded.nextepisode.airstamp;
          next_airdate = next_airdate.replace("T"," ").replace("+00:00","");

          var future = moment(next_airdate);
          var start = moment(yyyymmdd());
          var d = future.diff(start, 'days');

          document.getElementById(nextep).innerHTML = nextepdata;
          document.getElementById(nextairdate).innerHTML = next_airdate;
          document.getElementById(daysleft).innerHTML = d+" day(s)";

        }
        
        // Previous episode
        if (json._embedded && json._embedded.previousepisode) {
          var lastep = "lastep-" + id;
          var lastairdate = "lastairdate-" + id;

          last_airdate = json._embedded.previousepisode.airstamp;
          last_airdate = last_airdate.replace("T"," ").replace("+00:00","");

          prevepdata = seasonEpisode(json._embedded.previousepisode.season, json._embedded.previousepisode.number);
          document.getElementById(lastep).innerHTML = prevepdata;
          document.getElementById(lastairdate).innerHTML = last_airdate;
          //console.log(prevepdata);
        }
      }
      hideShowNotRunnning();
      finishUp();     
  };
  xhttp.open("GET", url, true);
  xhttp.send();
}

function seasonEpisode(season, episode) {
  season = ("00"+season).slice(-2);
  episode = ("00"+episode).slice(-2);
  return "S"+season+"E"+episode;
}

function yyyymmdd() {
    var x = new Date();
    var y = x.getFullYear().toString();
    var m = (x.getMonth() + 1).toString();
    var d = x.getDate().toString();
    (d.length == 1) && (d = '0' + d);
    (m.length == 1) && (m = '0' + m);
    var yyyymmdd = y+"-"+m+"-"+d;
    return yyyymmdd;
}

function hideShowNotRunnning() {
  var NotRunning = document.getElementsByClassName('NotRunning');

  /*for (var i = 0; i < NotRunning.length; i ++) {
      NotRunning[i].style.display = 'none';
  }*/

  if (document.getElementById('hs_checkbox').checked) 
    {
      for (var i = 0; i < NotRunning.length; i ++) {
        NotRunning[i].style.display = 'none';
      }
    } else {
        for (var i = 0; i < NotRunning.length; i ++) {
        NotRunning[i].style.display = '';
      }
    }
}

function finishUp() {
  var script = document.createElement('script');
  script.type = 'text/javascript';
  script.src = 'sort-table.js';    

  document.getElementsByTagName('head')[0].appendChild(script);
}

</script>

<center>
  <input type="checkbox" id="hs_checkbox" checked onclick="hideShowNotRunnning();"/> Show only Running/In Development/Upcoming
  <div id="table">
  </div>
</center>
</body>
</html>
